{"version":3,"file":"static/js/844.3136dc38.chunk.js","mappings":"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","sources":["components/MoviesDetails/MovieCast/MovieCast.styled.js","components/MoviesDetails/MovieCast/MovieCast.jsx","service-api/MoviesAPI.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const SCTitle = styled.h2`\nmargin-bottom: ${p => p.theme.space[3]}px;\n`;\nexport const SCSubTitle = styled.p`\nfont-weight: ${p => p.theme.fontWeights.bold};\nmargin-bottom: ${p => p.theme.space[2]}px;\n`;\n\nexport const SCText = styled.p`\ncolor: ${p => p.theme.colors.text};\nfont-style: italic;\n`;\nexport const SCCastList = styled.ul`\n box-shadow: inset 0px 8px 10px -8px rgb(77,75,77);\n\n li:first-child {\n  padding-top: ${p => p.theme.space[4]}px;\n }\n`;\n\nexport const SCImageWrapper = styled.div`\nflex-shrink: 0;\nwidth: 100px;\nheight: auto;\nborder-radius: ${p => p.theme.radii.md};\noverflow: hidden;\n`;\n\n\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\n\nimport { getMovieCastById, IMAGE_URL } from 'service-api/MoviesAPI';\nimport { Box } from 'components/Box';\nimport Loader from '../../Loader';\nimport placeholderIMG from '../../../images/placeholder.webp';\n\nimport {\n  SCImageWrapper,\n  SCTitle,\n  SCSubTitle,\n  SCText,\n  SCCastList,\n} from './MovieCast.styled';\n\nconst MovieCast = () => {\n  const { movieId } = useParams();\n  const [movieCast, setMovieCast] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    movieId && setIsLoading(true);\n\n    getMovieCastById(movieId)\n      .then(results => {\n        setMovieCast(results);\n      })\n      .catch(err => console.log(err))\n      .finally(setIsLoading(false));\n  }, [movieId]);\n\n  return (\n    <SCCastList>\n      {isLoading && <Loader />}\n      {!!movieCast?.cast?.length &&\n        movieCast?.cast.map(\n          ({\n            cast_id,\n            profile_path,\n            name,\n            known_for_department,\n            character,\n          }) => (\n            <Box\n              key={cast_id}\n              as=\"li\"\n              display=\"flex\"\n              gridGap=\"15px\"\n              alignItems=\"center\"\n              mb={5}\n            >\n              <SCImageWrapper>\n                {profile_path ? (\n                  <img src={`${IMAGE_URL}w500${profile_path}`} alt={name} />\n                ) : (\n                  <img src={placeholderIMG} alt={name} />\n                )}\n              </SCImageWrapper>\n              <Box>\n                <SCTitle>{name || '-'}</SCTitle>\n                <SCSubTitle>Character: {character || '-'}</SCSubTitle>\n                <SCText>{known_for_department || '-'}</SCText>\n              </Box>\n            </Box>\n          )\n        )}\n    </SCCastList>\n  );\n};\n\nexport default MovieCast;\n","import axios from 'axios';\nexport const IMAGE_URL = 'https://image.tmdb.org/t/p/';\n\nconst getMovies = async ({ pathName, param={} }) => {\n  axios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\n  const searchParam = new URLSearchParams({\n  api_key: '739ddb8e241607cc9ff00a57b23f5e54',\n  ...param\n  });\n  return axios\n    .get(`${pathName}?${searchParam}`)\n    .then(response => {\n      if (response.status !== 200) {\n        return Promise.reject(`Error: ${response.message}`);\n      }\n\n      if (response.data.total_results === 0) {\n        return Promise.reject(\n          'Sorry, no matches found. Please try again.'\n        );\n      }\n\n      return response.data;\n    })\n    .catch(err => {\n      return Promise.reject(err);\n    });\n};\n\nexport const getTrendingMovies = () => {\n  return getMovies({ pathName: '/trending/movie/day' })\n};\n\n     \nexport const getMoviesBySearchQuery = (query) => {\n  return getMovies({\n    pathName: '/search/movie',\n    param: {query}\n  })\n};\n  \nexport const getMovieDetailsById = (movieId) => {\n  return getMovies({\n    pathName: `/movie/${movieId}`\n  })\n};\nexport const getMovieCastById = (movieId) => {\n  return getMovies({\n    pathName: `/movie/${movieId}/credits`\n  })\n};\n\nexport const getMovieReviewsById = (movieId) => {\n  return getMovies({\n    pathName: `/movie/${movieId}/reviews`\n  })\n};"],"names":["SCTitle","styled","p","theme","space","SCSubTitle","fontWeights","bold","SCText","colors","text","SCCastList","SCImageWrapper","radii","md","movieId","useParams","useState","movieCast","setMovieCast","isLoading","setIsLoading","useEffect","getMovieCastById","then","results","catch","err","console","log","finally","Loader","cast","length","map","cast_id","profile_path","name","known_for_department","character","Box","as","display","gridGap","alignItems","mb","src","IMAGE_URL","alt","placeholderIMG","getMovies","pathName","param","axios","searchParam","URLSearchParams","api_key","response","status","Promise","reject","message","data","total_results","getTrendingMovies","getMoviesBySearchQuery","query","getMovieDetailsById","getMovieReviewsById"],"sourceRoot":""}